set.seed(0)
x <- rnorm(10)
y <- numeric(length(x))
for (i in 1:length(x)) {
y[i] <- (x[i] - min(x)) / (max(x) - min(x))
}
y
```
Replace the above code with equivalent code which does not use a loop. You may wish to write an explicit or anonymous function.
```{r}
set.seed(0)
x <- rnorm(10)
xmin <- min(x)
xmax <- max(x)
func <- function(x) {
return ((x - xmin) / (xmax - xmin))
}
y <- sapply(x, func)
y
# Fill this in.
```
### Other Basic Apply Functions
lapply and sapply are best suited for one-dimensional data structures (i.e. vectors and lists).
If you want to use an apply function for a multidimensional data structure, the simplest apply function is apply.
apply has an additional argument corresponding to the dimension (or dimensions) over which you want to apply the function.
```{r}
set.seed(0)
x <- matrix(rnorm(10), nrow = 2, ncol = 5)
y <- apply(x, 1, mean)
print(y)
z <- apply(x, 2, mean)
print(z)
```
tapply has an additional argument which can be one or more factors to apply separately.
```{r}
set.seed(0)
df <- data.frame(x = rnorm(10), ltr = factor(sample(c("a", "b", "c"), 10, replace = TRUE)), sample(c(1, 2, 3), 10, replace = TRUE))
df
byltr <- tapply(df$x, df$ltr, mean)
print(byltr)
# If the second argument is not a factor, it will be coerced to a factor.
bynmbr <- tapply(df$x, df$nmbr, mean)
print(bynmbr)
# Multiple factors can be included in a list or data frame.
byboth <- tapply(df$x, df[, c("ltr", "nmbr")], mean)
print(byboth)
```
Your turn!
Perform the listed operations on the HairEyeColor dataset.
```{r, eval = FALSE}
# Remove eval = FALSE or set eval = TRUE when you have completed this code chunk.
hec <- HairEyeColor
print(hec)
hec$Brown
# First create a two-dimensional version of the dataset called hec2d, which does not separate the data by sex.
hec2d <- data.frame(x = , ltr = factor(c("Brown", "Blue", "Hazel", "Green")), row.names = c("Black", "Brown", "Red", "Blond")) # Fill this in.
# Now use an apply function to determine the most common eye color for each hair color.
# You may wish to write an explicit or anonymous function.
# Fill this in.
he
```
Finally, mapply is similar to sapply, but can use functions with multiple arguments.
```{r}
x <- 1:10
y <- 11:20
geommean <- function(x, y) {
return(sqrt(x*y))
}
# This function will actually work without mapply, since sqrt and * are already vectorized.
z <- mapply(geommean, x, y)
print(z)
```
### Related Functions
aggregate works similarly to tapply on a greater variety of data structures.
```{r}
set.seed(0)
df <- data.frame(x = rnorm(10), y = rnorm(10), ltr = factor(sample(c("a", "b", "c"), 10, replace = TRUE)), nmbr = sample(c(1, 2, 3), 10, replace = TRUE))
z <- aggregate(df[, c("x", "y")], df[, c("ltr", "nmbr")], mean)
print(z)
```
sweep can be used to normalize datasets.
```{r}
x <- matrix(1:10, nrow = 2, ncol = 5)
xmean1 <- apply(x, 1, mean)
xmean2 <- apply(x, 2, mean)
# Subtract off the mean of each row/column.
y <- sweep(x, 1, xmean1)
print(y)
z <- sweep(x, 2, xmean2)
print(z)
# Multiply by the mean of each column (for some reason).
w <- sweep(x, 2, xmean1, FUN = "*")
print(w)
```
set.seed(0)
x <- matrix(rnorm(10), nrow = 2, ncol = 5)
y <- apply(x, 1, mean)
print(y)
z <- apply(x, 2, mean)
print(z)
x <- matrix(rnorm(10), nrow = 2, ncol = 5)
x
mean(x)
y <- apply(x, 1, mean)
y
z <- apply(x, 2, mean)
print(z)
x[1]
x[1,]
sum(s[1,])
sum(x[1,])
sum(x[1,]) / 4
x[2,]
sum(x[1,])
sum(x[2,])
sum(x[2,]) / 4
sum(x[2,]) / 5
sum(x[1,]) / 5
x
y
set.seed(0)
df <- data.frame(x = rnorm(10), ltr = factor(sample(c("a", "b", "c"), 10, replace = TRUE)), sample(c(1, 2, 3), 10, replace = TRUE))
df
byltr <- tapply(df$x, df$ltr, mean)
print(byltr)
# If the second argument is not a factor, it will be coerced to a factor.
bynmbr <- tapply(df$x, df$nmbr, mean)
set.seed(0)
df <- data.frame(x = rnorm(10), ltr = factor(sample(c("a", "b", "c"), 10, replace = TRUE)), sample(c(1, 2, 3), 10, replace = TRUE))
df
byltr <- tapply(df$x, df$ltr, mean)
print(byltr)
# If the second argument is not a factor, it will be coerced to a factor.
bynmbr <- tapply(df$x, df$nmbr, mean)
set.seed(0)
df <- data.frame(x = rnorm(10), ltr = factor(sample(c("a", "b", "c"), 10, replace = TRUE)), nmbr = sample(c(1, 2, 3), 10, replace = TRUE))
df
byltr <- tapply(df$x, df$ltr, mean)
print(byltr)
bynmbr <- tapply(df$x, df$nmbr, mean)
print(bynmbr)
# Multiple factors can be included in a list or data frame.
byboth <- tapply(df$x, df[, c("ltr", "nmbr")], mean)
print(byboth)
hec <- HairEyeColor
print(hec)
hec$Brown
hec$Hair
hec$Sex
hec[1]
hec[1,]
hec[,1]
hec2d <- data.frame(x = , col.names = factor(c("Brown", "Blue", "Hazel", "Green")), row.names = c("Black", "Brown", "Red", "Blond")) # Fill this in.
hec2d <- data.frame(x = , col.names = c("Brown", "Blue", "Hazel", "Green"), row.names = c("Black", "Brown", "Red", "Blond")) # Fill this in.
hec2d <- data.frame(x = hec, col.names = c("Brown", "Blue", "Hazel", "Green"), row.names = c("Black", "Brown", "Red", "Blond")) # Fill this in.
hec2d <- data.frame(x = hec, col.names = c("Brown", "Blue", "Hazel", "Green"), row.names = c("Black", "Brown", "Red", "Blond")) # Fill this in.
hec <- HairEyeColor
print(hec)
hec
hec[,,1]
hec[,,2]
hec2d <- data.frame(x = hec)
hec2d
hec2d$x.Hair
hec <- HairEyeColor
print(hec)
hec[,,1]
hec[,,2]
hec2d <- data.frame(x = hec, )
hec2d <- data.frame(x = hec)
hec2d
hec2d <- data.frame(x = hec)
hec2d <- tapply(hec$x.Hair, hec$x.Eye, hec$x.Freq)
df
hec <- HairEyeColor
print(hec)
hec[,,1]
hec[,,2]
hec2d <- tapply(hec$x.Hair, hec$x.Eye, hec$x.Freq)
merge(hec[,,1], hec[,,2])
hec[,,1]
hec[,,2]
first <- as.data.frame(hec[,,1])
second <- as.data.frame(hec[,,2])
first
second
merge(first, second)
hec <- HairEyeColor
print(hec)
first <- as.data.frame(hec[,,1])
second <- as.data.frame(hec[,,2])
merge(first, second)
first
merge(first, second, by = "Brown")
hec <- HairEyeColor
print(hec)
hec <- HairEyeColor
print(hec)
hec <- HairEyeColor
print(hec)
first <- as.data.frame(hec[,,1])
first
second <- as.data.frame(hec[,,2])
second
hec2d <- hec[,,1] + hec[,,2]
hec2d
mostEye <- apply(hec2d, 4, max)
mostEye <- apply(hec2d, 5, max)
mostEye <- apply(hec2d$Eye, 5, max)
hec2d$eye
hec2d[,1]
hec2d[,Blue]
hec2d[,hec2d$Blue]
hec2d[,"Blue""]
hec2d[,"Blue"]
hec2d[,"Brown"]
hec2d
hec2d[,"Blue"]
hec2d[,"Hazel"]
hec2d[,"Green"]
hec2d
hec2d["Black",]
hec2d["Brown",]
hec2d["Red",]
hec2d["Blond",]
max(hec2d["Blond",])
which(max(hec2d["Blond",]))
mostEye <- apply(hec2d, 1, max)
mostEye
mostEye <- apply(hec2d, 1, which.max)
mostEye
colnames(hec2d)
colnames(hec2d)[mostEye]
colnames(hec2d)[mostEye]
mostEye <- apply(hec2d, 1, which.max)
ordered <- colnames(hec2d)[mostEye]
ordered
print(paste("The most common eye color for ", colnames(hec2d), " is ", ordered, sep = ""))
print(paste("The most common eye color for ", colnames(hec2d), "hair is ", ordered, sep = ""))
print(paste("The most common eye color for ", colnames(hec2d), " hair is ", ordered, sep = ""))
print(paste("The most common eye color for ", colnames(hec2d), " hair is ", ordered, " eyes." sep = ""))
print(paste("The most common eye color for ", colnames(hec2d), " hair is ", ordered, " eyes.", sep = ""))
hec2d
print(paste("The most common eye color for ", rownames(hec2d), " hair is ", ordered, " eyes.", sep = ""))
transport <- c("car", "bike", "plane", "boat")
"[ei]"
"a[nt]"
"[[:alpha:]]"
transport "[ei]"
x <- rnorm(20)
x
plot(x)
x <- rnorm(20)
x
plot(x)
setwd("~/Desktop/stats133/Tennis/code")
---
title: "analysis_rankings"
author: "William Cheung"
date: "December 9, 2015"
output: pdf_document
---
Use Rankings to determine depth of countries and players
```{r}
library("readr")
getwd()
setwd("./code")
# read in the files
rankings_10 <- read.csv("../clean_data/2010_top100.csv", header = TRUE)
rankings_11 <- read.csv("../clean_data/2011_top100.csv", header = TRUE)
rankings_12 <- read.csv("../clean_data/2012_top100.csv", header = TRUE)
rankings_13 <- read.csv("../clean_data/2013_top100.csv", header = TRUE)
rankings_14 <- read.csv("../clean_data/2014_top100.csv", header = TRUE)
rankings_15 <- read.csv("../clean_data/2015_top100.csv", header = TRUE)
# Analyze rankings for 2010, looking for country's depth of players
# define depth as country having more than 1 player in the top 100
rankings_10
rankings_10$rank
rankings_10$country
# Get sorted frequencies of countries with more than 1 player in the top 100
country_freqs <- sort(table(rankings_10$country), decreasing = TRUE)
country_freqs
depth_freqs <- as.data.frame(country_freqs)
depth_freqs <- as.data.frame(depth_freqs[!(depth_freqs$country_freqs == 1),])
colnames(depth_freqs) <- "Num_Players"
depth_freqs
nrow(depth_freqs)
# function to find top50
top50 <- function(vect) {
if (vect <= 50) return (TRUE) else return (FALSE)
}
top50 = Vectorize(top50)
# function to find top20
top20 <- function(vect) {
if (vect <= 20) return (TRUE) else return (FALSE)
}
top20 = Vectorize(top20)
# function to find top10
top10 <- function(vect) {
if (vect <= 10) return (TRUE) else return (FALSE)
}
top10 = Vectorize(top10)
```
We will now break down the countries with most players in the top 100, then categorize them by counting the number of players in the top 50, top 20, and top 10.
```{r}
# Country with most players in top100
rownames(depth_freqs)[1]
# For ESP, 14 players in top100.
logical1 <- rankings_10$country == rownames(freqs)[1]
each_rank_1 <- rankings_10$rank[which(logical1)]
each_rank_1
# num in top50
each_rank_1[top50(each_rank_1)]
num_top50 <- length(each_rank_1[top50(each_rank_1)])
num_top50
# num in top20
each_rank_1[top20(each_rank_1)]
num_top20 <- length(each_rank_1[top20(each_rank_1)])
num_top20
#num in top10
each_rank_1[top10(each_rank_1)]
num_top10 <- length(each_rank_1[top10(each_rank_1)])
num_top10
nrow(depth_freqs)
country_vec <- c()
list_top100 <- list()
for (i in 1:nrow(depth_freqs)) {
country_vec <- c(country_vec, rownames(depth_freqs)[i])
temp <- c(rankings_10$rank[which(rankings_10$country == rownames(depth_freqs)[i])])
list_top100[[i]] <- temp
}
country_vec
list_top100
length(country_vec)
length(list_top100)
country_vec[1]
list_top100[[1]]
list_top50 <- list()
for (i in 1:nrow(depth_freqs)) {
list_top50[[i]] <- list_top100[[i]][top50(list_top100[[i]])]
}
list_top50
list_top20 <- list()
for (i in 1:nrow(depth_freqs)) {
list_top20[[i]] <- list_top100[[i]][top20(list_top100[[i]])]
}
list_top20
list_top10 <- list()
for (i in 1:nrow(depth_freqs)) {
list_top10[[i]] <- list_top100[[i]][top10(list_top100[[i]])]
}
list_top10
# create list of countries and how many of its players are in top100, 50, 20, 10
prepare <- function(input_freqs) {
country_stats <- list()
for (i in 1:nrow(input_freqs)) {
country_stats[[i]] <- c(length(list_top100[[i]]), length(list_top50[[i]]),
length(list_top20[[i]]), length(list_top10[[i]]))
}
names(country_stats) = country_vec
return (country_stats)
}
list_of_freqs <- prepare(depth_freqs)
final <- data.frame(list_of_freqs)
row.names(final) <- c("top100", "top50", "top20", "top10")
final
plot(final)
```
Extraneous
```{r}
rankings_10$rank[which(rankings_10$country == rownames(depth_freqs)[1])]
# get average rank of those 14. avg = 37.07143
sum(each_best_rank) / sum(best)
rownames(depth_freqs)[2]
# For FRA, 11 players in top100, avg rank of those 11: 48.63636
second <-  rankings_10$country == rownames(depth_freqs)[2]
second
each_second_rank <- rankings_10$rank[which(second)]
each_second_rank
sum(each_second_rank) / sum(second)
rownames(depth_freqs)[3]
# For GER, 11 players in top100, avg rank of those 11: 62.6667
third <-  rankings_10$country == rownames(depth_freqs)[3]
third
each_third_rank <- rankings_10$rank[which(third)]
each_third_rank
sum(each_third_rank) / sum(third)
rownames(depth_freqs)[4]
# For ARG, 7 players in top100, avg rank of those 7: 58.57143
fourth <-  rankings_10$country == rownames(depth_freqs)[4]
fourth
each_fourth_rank <- rankings_10$rank[which(fourth)]
each_fourth_rank
sum(each_fourth_rank) / sum(fourth)
rownames(depth_freqs)[5]
# For ARG, 5 players in top100, avg rank of those 5: 58.2
fifth <-  rankings_10$country == rownames(depth_freqs)[5]
fifth
each_fifth_rank <- rankings_10$rank[which(fifth)]
each_fifth_rank
sum(each_fifth_rank) / sum(fifth)
rownames(depth_freqs)[6]
# For USA, 5 players in top100, avg rank of those 5: 32
sixth <-  rankings_10$country == rownames(depth_freqs)[6]
sixth
each_sixth_rank <- rankings_10$rank[which(sixth)]
each_sixth_rank
sum(each_sixth_rank) / sum(sixth)
```
final
library(ggplot2)  # for plots
final
colnames(final)
ggplot(data = final, aes(x = colnames(final))) + geom_histogram())
ggplot(data = final, aes(x = colnames(final)) + geom_histogram())
ggplot(data = final, aes(x = colnames(final))) + geom_histogram()
ggplot(data = final, aes(x = colnames(final), y = rownames(final))) + geom_histogram()
rownames(final)
ggplot(data = final, aes(x = rownames(final), y = "frequency")) + geom_histogram()
ggplot(data = final, aes(x = rownames(final), y = "frequency")) + geom_boxplot()
ggplot(data = final, aes(x = rownames(final), y = "frequency")) + geom_density()
ggplot(data = final, aes(x = rownames(final))) + geom_density()
ggplot(data = final, aes(x = rownames(final)) + geom_density()
ggplot(data = final, aes(x = rownames(final))) + geom_density()
library(ggplot2)  # for plots
ggplot(data = final, aes(x = rownames(final))) + geom_density()
ggplot(data = final) + geom_density()
ggplot(data = final, aes(x = rownames(final))) + geom_density()
final
final[1]
final[2]
final$ESP
ggplot(data = final, aes(x = rownames(final), y = colnames(final))) + geom_density()
ggplot(data = final, aes(x = rownames(final))) + geom_density()
library(readr)    # for reading data files
library(ggplot2)  # for plots
tents <- read_csv("https://raw.githubusercontent.com/gastonstat/stat133/master/datasets/tents1.csv")
ggplot(data = tents, aes(x = price)) +
geom_histogram()
tents
list_of_freqs <- prepare(depth_freqs)
list_of_freqs
as.matrix(list_of_freqs)
as.data.frame(list_of_freqs)
list_of_freqs <- prepare(depth_freqs)
list_of_freqs
list_of_freqs[[1]]
list_of_freqs[1]
list_top100[[1]]
country_vec[1]
final <- data.frame(x = list_of_freqs, y = country_vec)
final
list_of_freqs
names(list_of_freqs)
final <- data.frame(x = names(list_of_freqs), y = country_vec)
final
final <- data.frame(Country = names(list_of_freqs), y = country_vec)
final
list_of_freqs
final <- data.frame(Country = names(list_of_freqs), y = c("top100", "top50", "top20", "top10")
final <- data.frame(Country = names(list_of_freqs), y = c("top100", "top50", "top20", "top10"))
final <- data.frame(Country = names(list_of_freqs), y = c("top100", "top50", "top20", "top10"))
final
final <- data.frame(Country = names(list_of_freqs), c("top100", "top50", "top20", "top10"))
final
final <- data.frame(c(cuntry = names(list_of_freqs), "top100", "top50", "top20", "top10"))
final
final <- data.frame(c(country = names(list_of_freqs), "top100", "top50", "top20", "top10"))
final
final <- data.frame(Country = names(list_of_freqs), y = c("top100", "top50", "top20", "top10"))
final
final <- data.frame(Country = names(list_of_freqs), "top100", "top50", "top20", "top10"))
final <- data.frame(Country = names(list_of_freqs), "top100", "top50", "top20", "top10")
final
list_of_freqs
final <- data.frame(Country = names(list_of_freqs), list_of_freqs)
final
row.names(final) <- c("top100", "top50", "top20", "top10")
final <- data.frame(Country = names(list_of_freqs))
final
row.names(final) <- c("top100", "top50", "top20", "top10")
list_of_freqs
list_of_freqs[1]
final <- data.frame(list_of_freqs)
final
row.names(final) <- c("top100", "top50", "top20", "top10")
final
colnames(final)
ggplot(data = final, aes(x = top)) + geom_density()
plot(final)
ggplot(data = final, aes(x = "top")) + geom_density()
plot(final)
ggplot(data = final, aes(x = "top")) + geom_density()
ggplot(data = final, aes(x = "top")) + geom_histogram()
ggplot(data = final, aes(x = top100)) + geom_histogram()
ggplot(data = final, aes(x = final$top100)) + geom_histogram()
final
final$top100
ggplot(data = final, aes(x = final$ESP)) + geom_histogram()
ggplot(data = final, aes(x = colnames(final))) + geom_histogram()
ggplot(data = final, aes(y = colnames(final))) + geom_histogram()
ggplot(data = final, aes(x = rownames(final), y = colnames(final))) + geom_histogram()
rownames(final)
ggplot(data = final, aes(x = top, y = colnames(final))) + geom_histogram()
ggplot(data = final, aes(x = "top", y = colnames(final))) + geom_histogram()
ggplot(data = final, aes(x = "top", y = colnames(final)))
ggplot(data = final, aes(x = "top", y = colnames(final))) + geom_line()
ggplot(data = final, aes(x = row(final), y = colnames(final))) + geom_line()
row(final)
row.names.data.frame(final)
rownames(final)
ggplot(data = final, aes(x = rownames(final), y = colnames(final))) + geom_line()
