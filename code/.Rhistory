# Create a list and map the country with index of which ranking its player is in the top 50.
list_top50 <- list()
for (i in 1:nrow(depth_freqs)) {
list_top50[[i]] <- list_top100[[i]][top50(list_top100[[i]])]
}
# Create a list and map the country with index of which ranking its player is in the top 20.
list_top20 <- list()
for (i in 1:nrow(depth_freqs)) {
list_top20[[i]] <- list_top100[[i]][top20(list_top100[[i]])]
}
# Create a list and map the country with index of which ranking its player is in the top 10.
list_top10 <- list()
for (i in 1:nrow(depth_freqs)) {
list_top10[[i]] <- list_top100[[i]][top10(list_top100[[i]])]
}
# Prepare is the helper function to map those names of countries to their respective numbers.
prepare <- function(input_freqs) {
country_stats <- list()
for (i in 1:nrow(input_freqs)) {
country_stats[[i]] <- c(length(list_top100[[i]]), length(list_top50[[i]]),
length(list_top20[[i]]), length(list_top10[[i]]))
}
names(country_stats) = country_vec
return (country_stats)
}
# Create list of countries and how many of its players are in top 100, 50, 20, 10 from 2010.
list_of_freqs <- prepare(depth_freqs)
countries <- names(list_of_freqs)
# Create vectors of each country's frequency of top 100, 50, 20, 10
all_100 <- c()
all_50 <- c()
all_20 <- c()
all_10 <- c()
for (country in 1:length(list_of_freqs)) {
all_100 <- c(all_100, list_of_freqs[[country]][1])
all_50 <- c(all_50, list_of_freqs[[country]][2])
all_20 <- c(all_20, list_of_freqs[[country]][3])
all_10 <- c(all_10, list_of_freqs[[country]][4])
}
# Create data frame of Countries with their respective number of players in the top 100, 50, 20 and 10.
final <- data.frame(top100 = all_100, top50 = all_50, top20 = all_20, top10 = all_10)
rownames(final) <- countries
```
\newpage
First we will create basic barplots to visualize the number of players each country has in each category for 2015.
```{r}
# Create barplots of the top 100, 50, 20, and 10 for each country.
rainbow_16 <-rainbow(n=16, s = 1, v = 1, start = 0, end = max(1, 16 - 1)/16, alpha = 1)
pdf("../images/top_100_2015.pdf")
a<-dev.cur()
png("../images/top_100_2015.png")
dev.control("enable")
top100_bar <- barplot(final$top100, names.arg = rownames(final), ylab = "Number of Players",
xlab = "Country", las = 2, col = rainbow_16, main = "Top 100 for 2015 by Country")
abline(h = seq(from = 0, to = 14, by = 2), col = ' gray')
dev.copy(which=a)
dev.off()
dev.off()
pdf("../images/top_50_2015.pdf")
a<-dev.cur()
png("../images/top_50_2015.png")
dev.control("enable")
top50_bar <- barplot(final$top50, names.arg = rownames(final), ylab = "Number of Players",
xlab = "Country", las = 2, col = rainbow_16, main = "Top 50 for 2015 by Country")
abline(h = seq(from = 0, to = 14, by = 2), col = ' gray')
dev.copy(which=a)
dev.off()
dev.off()
pdf("../images/top_20_2015.pdf")
a<-dev.cur()
png("../images/top_20_2015.png")
dev.control("enable")
top20_bar <- barplot(final$top20, names.arg = rownames(final), ylab = "Number of Players",
xlab = "Country", las = 2, col = rainbow_16, main = "Top 20 for 2015 by Country")
abline(h = seq(from = 0, to = 14, by = 1), col = ' gray')
dev.copy(which=a)
dev.off()
dev.off()
pdf("../images/top_10_2015.pdf")
a<-dev.cur()
png("../images/top_10_2015.png")
dev.control("enable")
top10_bar <- barplot(final$top10, names.arg = rownames(final), ylab = "Number of Players",
xlab = "Country", las = 2, col = rainbow_16, main = "Top 10 for 2015 by Country")
abline(h = seq(from = 0, to = 14, by = 0.5), col = ' gray')
dev.copy(which=a)
dev.off()
dev.off()
```
\newpage
After viewing the top 100, 50, 20, and 10 in 2010 by country on their own, we will now see if there is a difference in depth by tracking how many players were in the top 100, 50, 20, and 10 per each country together. We will do this by raw number of players, then percentage of players in that respective category.
```{r, warning= FALSE, message=FALSE}
final_country_names <- rownames(final)
final_before_reshape <- final
# Reshape the data frame in preparation for ggplot
final <- melt(final)
final$country <- final_country_names
# Plot Country's Depth for 2015
pdf("../images/country_depth_2015.pdf")
a<-dev.cur()
png("../images/country_depth_2015.png")
dev.control("enable")
ggplot(final, aes(variable, value, group=factor(country), color = factor(country))) + geom_line(size=.75) + geom_point() + ylab("Number of Players") + xlab("Category") + ggtitle("2015 Country Depth") + theme(legend.title = element_text(size=16, face="bold"))+ scale_color_discrete(name="Country")
dev.copy(which=a)
dev.off()
dev.off()
# Now Plot the percentage of players in each category.
sum_top100 <- sum(final_before_reshape$top100)
percentage_100 = c()
for (i in 1:length(rownames(final_before_reshape))) {
percentage_100 = c(percentage_100, final_before_reshape[,1][i] / sum_top100)
}
# Calculate percentages
sum_top50 <- sum(final_before_reshape$top50)
percentage_50 = c()
for (i in 1:length(rownames(final_before_reshape))) {
percentage_50 = c(percentage_50, final_before_reshape[,2][i] / sum_top50)
}
sum_top20 <- sum(final_before_reshape$top20)
percentage_20 = c()
for (i in 1:length(rownames(final_before_reshape))) {
percentage_20 = c(percentage_20, final_before_reshape[,3][i] / sum_top20)
}
sum_top10 <- sum(final_before_reshape$top10)
percentage_10 = c()
for (i in 1:length(rownames(final_before_reshape))) {
percentage_10 = c(percentage_10, final_before_reshape[,4][i] / sum_top10)
}
percentage_final <- final_before_reshape
percentage_final$top100 <- percentage_100
percentage_final$top50 <- percentage_50
percentage_final$top20 <- percentage_20
percentage_final$top10 <- percentage_10
final_country_names <- rownames(final_before_reshape)
p_final_before_reshape <- percentage_final
percentage_final <- melt(percentage_final)
percentage_final$country <- final_country_names
# Plot the Country's Depth in 2015 by Percentage
pdf("../images/country_percentage_2015.pdf")
a<-dev.cur()
png("../images/country_percentage_2015.png")
dev.control("enable")
ggplot(percentage_final, aes(variable, value, group=factor(country), color = factor(country))) + geom_line(size=.75) + geom_point() + ylab("Percentage of Players in Respective Category") + xlab("Category") + ggtitle("2015 Country Depth by Percentage") + theme(legend.title = element_text(size=16, face="bold"))+ scale_color_discrete(name="Country")
dev.copy(which=a)
dev.off()
dev.off()
```
\newpage
# Part II.
Evolution of rankings- a year on year change of how many players in each category: show most consistent countries, based off the starting point of year 2010.
```{r, warning=FALSE, message=FALSE}
#now we need at least 5 players in the top100
country_freqs_10 <- sort(table(rankings_10$country), decreasing = TRUE)
depth_freqs_10 <- as.data.frame(country_freqs_10)
depth_freqs_10 <- as.data.frame(depth_freqs_10[(depth_freqs_10$country_freqs_10 >= 5),])
colnames(depth_freqs_10) <- "2010"
country_freqs_11 <- sort(table(rankings_11$country), decreasing = TRUE)
depth_freqs_11 <- as.data.frame(country_freqs_11)
depth_freqs_11 <- as.data.frame(depth_freqs_11[(depth_freqs_11$country_freqs_11 >= 5),])
colnames(depth_freqs_11) <- "2011"
country_freqs_12 <- sort(table(rankings_12$country), decreasing = TRUE)
depth_freqs_12 <- as.data.frame(country_freqs_12)
depth_freqs_12 <- as.data.frame(depth_freqs_12[(depth_freqs_12$country_freqs_12 >= 5),])
colnames(depth_freqs_12) <- "2012"
country_freqs_13 <- sort(table(rankings_13$country), decreasing = TRUE)
depth_freqs_13 <- as.data.frame(country_freqs_13)
depth_freqs_13 <- as.data.frame(depth_freqs_13[(depth_freqs_13$country_freqs_13 >= 5),])
colnames(depth_freqs_13) <- "2013"
country_freqs_14 <- sort(table(rankings_14$country), decreasing = TRUE)
depth_freqs_14 <- as.data.frame(country_freqs_14)
depth_freqs_14 <- as.data.frame(depth_freqs_14[(depth_freqs_14$country_freqs_14 >= 5),])
colnames(depth_freqs_14) <- "2014"
country_freqs_15 <- sort(table(rankings_15$country), decreasing = TRUE)
depth_freqs_15 <- as.data.frame(country_freqs_15)
depth_freqs_15 <- as.data.frame(depth_freqs_15[(depth_freqs_15$country_freqs_15 >= 5),])
colnames(depth_freqs_15) <- "2015"
# created all_merged data frame
all_merged <- merge(depth_freqs_10, depth_freqs_11, by = 0, all.x=TRUE)
row.names(all_merged) <- all_merged$Row.names
all_merged$Row.names <- NULL
all_merged <- merge(all_merged, depth_freqs_12, by = 0, all.x = TRUE)
row.names(all_merged) <- all_merged$Row.names
all_merged$Row.names <- NULL
all_merged <- merge(all_merged, depth_freqs_13, by = 0, all.x = TRUE)
row.names(all_merged) <- all_merged$Row.names
all_merged$Row.names <- NULL
all_merged <- merge(all_merged, depth_freqs_14, by = 0, all.x = TRUE)
row.names(all_merged) <- all_merged$Row.names
all_merged$Row.names <- NULL
all_merged <- merge(all_merged, depth_freqs_15, by = 0, all.x = TRUE)
row.names(all_merged) <- all_merged$Row.names
all_merged$Row.names <- NULL
# merged_before_reshape is the data.frame before a reshape
merged_before_reshape <- all_merged
country_names <- rownames(all_merged)
library(reshape2)
all_merged <- melt(all_merged)
all_merged[is.na(all_merged)] <- 0
all_merged$country <- country_names
# Plot the top players in countries by year
pdf("../images/evolution_rankings_2015.pdf")
a<-dev.cur()
png("../images/evolution_rankings_2015.png")
dev.control("enable")
ggplot(all_merged, aes(variable, value, group=factor(country), color = factor(country))) + geom_line(size=.75) + geom_point() + ylab("Number of Players in Top 100") + xlab("Year") + ggtitle("Evolution of Tennis Rankings") + theme(legend.title = element_text(size=12))+ scale_color_discrete(name="Country")
dev.copy(which=a)
dev.off()
dev.off()
```
\newpage
# Part III.
For every country add the points on. Average number of points per country. We want to find out how good the average player is. How much a player contributes on average. We will use data from 2015. Average number of points per any country: this is the sum of all points / number of unique countries = averae points for a country. Our metric for determining how good a player is will be comparing the number of points that player has versus the numbr of points the average player has. Therefore we have: number of points of the country / # of players in that country = how good that player is.
```{r}
# get sum of all the points
sum_2015_points <- sum(rankings_15$points)
distinct_countries <- unique(rankings_15$country)
avg_points_per_country <- sum_2015_points / length(distinct_countries)
# make data frame with points and country
country_points <- data.frame(rankings_15$points, rankings_15$country)
names(country_points) <- c("points", "country")
# create list of country and points
list_points <- c()
for (i in 1:length(distinct_countries)) {
index1 <- which(country_points$country == distinct_countries[i])
temp1 <- c(rankings_15$points[index1])
list_points[[i]] <- temp1
}
names(list_points) <- distinct_countries
# get the average points for top100 players
avg_points_per_player <- sum_2015_points / nrow(rankings_15)
# get avergae points for a country's players
avg_player_for_country = list()
for (i in 1:length(list_points)) {
avg_player_for_country[[i]] <- sum((list_points[[i]]) / length(list_points[[i]]))
}
names(avg_player_for_country) <- distinct_countries
# compare average points for all players vs the country's average player points
list_difference_country_vs_avg <- list()
for (i in 1:length(avg_player_for_country)) {
list_difference_country_vs_avg[[i]] <- avg_player_for_country[[i]] - avg_points_per_player
}
names(list_difference_country_vs_avg) <- distinct_countries
avg_vs_country_2015 <- data.frame(matrix(unlist(list_difference_country_vs_avg),
nrow=length(list_difference_country_vs_avg), byrow=T),
row.names = distinct_countries)
names(avg_vs_country_2015) <- "difference"
country_vs_avg_2015_sorted <- avg_vs_country_2015[order(
avg_vs_country_2015$difference,
decreasing = TRUE),
, drop = FALSE]
top_5_countries_by_avg_points <- head(country_vs_avg_2015_sorted, n = 5)
bottom_5_countries_by_avg_points <- tail(country_vs_avg_2015_sorted, n = 5)
top_5_countries_by_avg_points
bottom_5_countries_by_avg_points
pdf("../images/country_points_2015.pdf")
a<-dev.cur()
png("../images/country_points_2015.png")
dev.control("enable")
t <- ggplot(top_5_countries_by_avg_points, aes(rownames(top_5_countries_by_avg_points), difference, group=factor(country), color = factor(rownames(top_5_countries_by_avg_points))))
t + geom_bar(stat = "identity") + xlab("Country") + ylab("Average Country Points - Average Overall Player") + ggtitle("Top 5 Countries by Average Points 2015") + theme(legend.title = element_text(size=12))+ scale_color_discrete(name="Country")
dev.copy(which=a)
dev.off()
dev.off()
```
---
title: "Analysis of Tennis Matches"
author: "Matthew Weglicki"
date: "December 6, 2015"
output: pdf_document
---
# DATA ANALYSIS BY MATCHES
Using our clean data, we will now go on to investigate the dominance of certain countries within men's singles tennis by analyzing all available match statistics since 2010. We will be using the number of titles each country has won since 2010 as a proxy for "dominance". Tennis is also played on three different court surfaces, Clay, Grass and Hard, as well as three different tour "levels", ATP, Masters, and Grandslams, where each level offers a different number of points. Thus after we have collected data on how many titles each country has won, we will proceed to analyze how many of those titles were won on corresponding surfaces and levels, in order to answer the questions of whether some countries are particularly dominant on certain surfaces, or whether they shine on big occasions (ie at tournaments with more points).
##Part I - Function Creation
First we must create the functions which when given the match statistics from certain years, are able to extract those matches which were "title matches", where the winner won the entire tournament, and output the winning nationalities, surface, and level of each tournament in that year.
```{r, eval=TRUE, tidy=TRUE}
setwd("/Users/williamcheung/Desktop/stats133/Tennis/")
setwd("./code")
library("readr")
# read in the files from clean_data
matches_10 <- read_csv("../clean_data/matches_10_clean.csv")
matches_11 <- read_csv("../clean_data/matches_11_clean.csv")
matches_12 <- read_csv("../clean_data/matches_12_clean.csv")
# exclude an entry from data which was repetitive and hence placed a bug in the analysis later on
matches_12 <- matches_12[-2656, ]
matches_13 <- read_csv("../clean_data/matches_13_clean.csv")
matches_14 <- read_csv("../clean_data/matches_14_clean.csv")
matches_15 <- read_csv("../clean_data/matches_15_clean.csv")
# function which produces unique number of tournaments for a given year
uniq_tour <- function(tour_year) {
return(unique(tour_year$tourney_name))
}
# function when given a name or list of names of tournaments and a given year will output the total number of matches in the tournament(s), hence allows you to find the index of the final match of the tournament
tour_num_matches <- function(tour_names, tour_year) { num_matches <- numeric(0)
for (i in tour_names) {
num_matches <- c(num_matches, as.numeric(sum(tour_year$tourney_name == i)))
}
return(num_matches)
}
# function that when given tour_year, uniq_tour and total matches in each tournament, returns the ioc of the title winner
title_winner_ioc <- function(tour_year, tour_names, total_matches) {
ioc_list <- character(0)
for (i in 1:length(tour_names)) {
ioc_list <- c(ioc_list, tour_year[tour_year$tourney_name == tour_names[i] & tour_year$match_num == total_matches[i], 6])
}
return(ioc_list)
}
# function that combines all of the above ie given a match year, it just displays a list of the countries that won the tournaments in a given year
title_winning_iocs <- function(tour_year) {
tour_names <- uniq_tour(tour_year)
total_matches <- tour_num_matches(tour_names, tour_year)
iocs <- title_winner_ioc(tour_year, tour_names, total_matches)
return(iocs)
}
#last two functions for surface and tourney level
#surface
title_winner_surface <- function(tour_year, tour_names, total_matches) {
surface_list <- character(0)
for (i in 1:length(tour_names)) {
surface_list <- c(surface_list, tour_year[tour_year$tourney_name == tour_names[i] & tour_year$match_num == total_matches[i], 2])
}
return(surface_list)
}
title_winning_surfaces <- function(tour_year) {
tour_names <- uniq_tour(tour_year)
total_matches <- tour_num_matches(tour_names, tour_year)
surfaces <- title_winner_surface(tour_year, tour_names, total_matches)
return(surfaces)
}
#tourney_level
title_winner_level <- function(tour_year, tour_names, total_matches) {
level_list <- character(0)
for (i in 1:length(tour_names)) {
level_list <- c(level_list, tour_year[tour_year$tourney_name == tour_names[i] & tour_year$match_num == total_matches[i], 3])
}
return(level_list)
}
title_winning_levels <- function(tour_year) {
tour_names <- uniq_tour(tour_year)
total_matches <- tour_num_matches(tour_names, tour_year)
levels <- title_winner_level(tour_year, tour_names, total_matches)
return(levels)
}
```
## Part II - Dataframe Creation
Now we move onto applying the functions from part I in order to create dataframes for each year containing information about the winning nationality, surface and level of each tournament in that year. We then consolidate all these dataframes into one comprehensive dataframe, from which we will be able to conduct our appropriate analysis.
```{r, eval=TRUE}
# create a dataframe for each year with the information in the above description
df_2010 <- data.frame(
tournament_name = uniq_tour(matches_10),
winner_ioc = title_winning_iocs(matches_10),
winning_surface = title_winning_surfaces(matches_10),
winning_level = title_winning_levels(matches_10),
year = 2010
)
df_2011 <- data.frame(
tournament_name = uniq_tour(matches_11),
winner_ioc = title_winning_iocs(matches_11),
winning_surface = title_winning_surfaces(matches_11),
winning_level = title_winning_levels(matches_11),
year = 2011
)
df_2012 <- data.frame(
tournament_name = uniq_tour(matches_12),
winner_ioc = title_winning_iocs(matches_12),
winning_surface = title_winning_surfaces(matches_12),
winning_level = title_winning_levels(matches_12),
year = 2012
)
df_2013 <- data.frame(
tournament_name = uniq_tour(matches_13),
winner_ioc = title_winning_iocs(matches_13),
winning_surface = title_winning_surfaces(matches_13),
winning_level = title_winning_levels(matches_13),
year = 2013
)
df_2014 <- data.frame(
tournament_name = uniq_tour(matches_14),
winner_ioc = title_winning_iocs(matches_14),
winning_surface = title_winning_surfaces(matches_14),
winning_level = title_winning_levels(matches_14),
year = 2014
)
df_2015 <- data.frame(
tournament_name = uniq_tour(matches_15),
winner_ioc = title_winning_iocs(matches_15),
winning_surface = title_winning_surfaces(matches_15),
winning_level = title_winning_levels(matches_15),
year = 2015
)
# create a master dataframe of all of the above data
master_df <- merge(df_2010, df_2011, all = TRUE)
master_df <- merge(master_df, df_2012, all = TRUE)
master_df <- merge(master_df, df_2013, all = TRUE)
master_df <- merge(master_df, df_2014, all = TRUE)
master_df <- merge(master_df, df_2015, all = TRUE)
```
## Part III - Analysis of Master Dataframe
Now we are able to draw on our data to answer the questions of which are the most dominant countries in men's singles tennis since 2010, and do they have a particular affinity to a court type or to the larger events in the sport?
Total Number of Titles:
```{r, eval=TRUE, tidy=TRUE}
# list of countries that have won titles since 2010
winner_ioc_list <- unique(master_df$winner_ioc)
# Check how many countries have won titles
length(winner_ioc_list)
# vector of total titles by country with names
titles_by_ioc <- numeric(0)
for (i in winner_ioc_list) {
titles_by_ioc <- c(titles_by_ioc, sum(master_df$winner_ioc == i))
}
names(titles_by_ioc) <- winner_ioc_list[1:32]
titles_by_ioc
# order the vector
ordered_titles_by_ioc <- sort(titles_by_ioc, decreasing = TRUE)
ordered_titles_by_ioc
# top 5 countries in terms of titles
top5 <- ordered_titles_by_ioc[1:5]
top5_names <- names(top5)
# construct barplot in terms of top 5 title winning countries
pdf("../images/top_5_titles.pdf")
a<-dev.cur()
png("../images/top_5_titles.png")
dev.control("enable")
barplot(top5, xpd = F, axes = F, main = "Total number of titles by top 5 countries", xlab = "Country", ylim = c(0, 100), ylab = "Total number of titles")
axis(side = 2, at = seq(from = 0, to = 100, by = 20), tick = TRUE, las = 2)
dev.copy(which=a)
dev.off()
dev.off()
```
Titles by Surface:
```{r, eval=TRUE, tidy=TRUE}
# number of titles each country wins on each surface
clay_wins_list <- numeric(0)
for (i in winner_ioc_list)
{clay_wins_list <- c(clay_wins_list, sum(master_df$winner_ioc == i & master_df$winning_surface == 'Clay'))
}
grass_wins_list <- numeric(0)
for (i in winner_ioc_list) {
grass_wins_list <- c(grass_wins_list, sum(master_df$winner_ioc == i & master_df$winning_surface == 'Grass'))
}
hard_wins_list <- numeric(0)
for (i in winner_ioc_list) {
hard_wins_list <- c(hard_wins_list, sum(master_df$winner_ioc == i & master_df$winning_surface == 'Hard'))
}
surface_df <- data.frame(
country = winner_ioc_list,
Clay = clay_wins_list,
Grass = grass_wins_list,
Hard = hard_wins_list
)
# extracting indices required to obtain the top 5 countries from above for a comparison
row_indices_top5 <- c(which(surface_df$country == 'ESP'), which(surface_df$country == 'SRB'), which(surface_df$country == 'SUI'), which(surface_df$country == 'FRA'), which(surface_df$country == 'USA'))
top5_surfaces <- surface_df[row_indices_top5, ]
top5_surfaces
# plot surfaces information for comparison
pdf("../images/top_5_surfaces.pdf")
a<-dev.cur()
png(filename = "../images/top_5_surfaces.png")
dev.control("enable")
barplot(height = t(as.matrix(top5_surfaces[, 2:4])), names.arg = (top5_names), xpd = F,
main = "Top 5 country titles by surfaces",
xlab = "Country", ylab = "Number of titles",
ylim = c(0, 100), axes = F,
col = c(rgb(1, 0 , 0), rgb(0, 1, 0), rgb(0,0, 1)),
legend = colnames(top5_surfaces)[-1])
axis(side = 2, at = seq(from = 0, to = 100, by = 20), tick = TRUE, las = 2)
dev.copy(which=a)
dev.off()
dev.off()
```
Titles by Level:
```{r, eval=TRUE, tidy=TRUE}
# number titles each country wins per level
# what levels are there?
unique(master_df$winning_level)
# construct a dataframe of levels
A_wins_list <- numeric(0)
for (i in winner_ioc_list) {
A_wins_list <- c(A_wins_list, sum(master_df$winner_ioc == i & master_df$winning_level == 'A'))
}
G_wins_list <- numeric(0)
for (i in winner_ioc_list) {
G_wins_list <- c(G_wins_list, sum(master_df$winner_ioc == i & master_df$winning_level == 'G'))
}
M_wins_list <- numeric(0)
for (i in winner_ioc_list) {
M_wins_list <- c(M_wins_list, sum(master_df$winner_ioc == i & master_df$winning_level == 'M'))
}
level_df <- data.frame(
country = winner_ioc_list,
ATP = A_wins_list,
Grandslams = G_wins_list,
Masters = M_wins_list
)
# extract our top 5 countries from earlier for further comparison
top5_levels <- level_df[row_indices_top5, ]
top5_levels
# plot for visual comparison
pdf("../images/top_5_level.pdf")
a<-dev.cur()
png(filename = "../images/top_5_level.png")
dev.control("enable")
barplot(height = t(as.matrix(top5_levels[, 2:4])), names.arg = (top5_names), xpd = F,
main = "Top 5 country titles by level",
xlab = "Country", ylab = "Number of titles",
ylim = c(0, 70), axes = F,
col = c(rgb(0.8,0.5,0.2), rgb(1, 0.85, 0), rgb(0.75, 0.75, 0.75)),
legend = colnames(top5_levels)[-1], beside = TRUE)
axis(side = 2, at = seq(from = 0, to = 70, by = 10), tick = TRUE, las = 2)
dev.copy(which=a)
dev.off()
dev.off()
```
